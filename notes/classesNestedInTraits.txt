      val parents = c.enclosingClass match {
        case ClassDef(_, _, _, Template(parents, _, _)) => parents
        case ModuleDef(_, _, Template(parents, _, _)) => parents
        case e => {
          c.error(c.enclosingPosition, s"Unknown type of enclosing class: ${e.getClass}")
          Nil
        }
      }

      println("---")

      parents.foreach(p => {
        p match {
          case p2: Ident => {
            println("Filter " + t)
            println(p.tpe.declarations.foreach(x => {
              val TypeRef(ThisType(sym2), sym, args) = t

              // We have to replace the references to <Parent>.this with <Enclosing class>.this, as all types
              // from the Parent are inherited in Enclosing. If we want to use a value defined in Parent (it will
              // have type Parent.this.X) for a class defined in Enclosing (it will have type Enclosing.this.X),
              // we need the substitution to get a match.
              // TODO: what if the class's parameter is in one class, and the class definition in another (both inherited)?
              // x - candidate for parameter value
              // p.symbol - <Parent>
              // sym2 - <Enclosing>
              val xx = x.typeSignature.map(tt => {
                tt match {
                  case ttt: ThisType if ttt.sym == p.symbol => ThisType(sym2)
                  case _ => tt
                }
              })

              println(showRaw(p.tpe),
                "\n\t", showRaw(x.typeSignature),
                "\n\t", showRaw(p.symbol),
                "\n\t", showRaw(sym),
                "\n\t", x.typeSignature,
                //"\n\t", x.typeSignature.substituteSymbols(List(c.universe.NoSymbol), List(p.symbol)))
                "\n\t", xx
              )

              println(x.typeSignature, t, x.typeSignature =:= t, xx =:= t)
              println()
            }))
          }
          case _ => println("- " + c.universe.showRaw(p))
        }
      })

      println("---")